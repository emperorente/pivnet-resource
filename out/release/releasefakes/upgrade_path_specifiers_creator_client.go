// This file was generated by counterfeiter
package releasefakes

import (
	"sync"

	"github.com/pivotal-cf/go-pivnet"
)

type UpgradePathSpecifiersCreatorClient struct {
	CreateUpgradePathSpecifierStub        func(productSlug string, releaseID int, specifier string) (pivnet.UpgradePathSpecifier, error)
	createUpgradePathSpecifierMutex       sync.RWMutex
	createUpgradePathSpecifierArgsForCall []struct {
		productSlug string
		releaseID   int
		specifier   string
	}
	createUpgradePathSpecifierReturns struct {
		result1 pivnet.UpgradePathSpecifier
		result2 error
	}
	createUpgradePathSpecifierReturnsOnCall map[int]struct {
		result1 pivnet.UpgradePathSpecifier
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UpgradePathSpecifiersCreatorClient) CreateUpgradePathSpecifier(productSlug string, releaseID int, specifier string) (pivnet.UpgradePathSpecifier, error) {
	fake.createUpgradePathSpecifierMutex.Lock()
	ret, specificReturn := fake.createUpgradePathSpecifierReturnsOnCall[len(fake.createUpgradePathSpecifierArgsForCall)]
	fake.createUpgradePathSpecifierArgsForCall = append(fake.createUpgradePathSpecifierArgsForCall, struct {
		productSlug string
		releaseID   int
		specifier   string
	}{productSlug, releaseID, specifier})
	fake.recordInvocation("CreateUpgradePathSpecifier", []interface{}{productSlug, releaseID, specifier})
	fake.createUpgradePathSpecifierMutex.Unlock()
	if fake.CreateUpgradePathSpecifierStub != nil {
		return fake.CreateUpgradePathSpecifierStub(productSlug, releaseID, specifier)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createUpgradePathSpecifierReturns.result1, fake.createUpgradePathSpecifierReturns.result2
}

func (fake *UpgradePathSpecifiersCreatorClient) CreateUpgradePathSpecifierCallCount() int {
	fake.createUpgradePathSpecifierMutex.RLock()
	defer fake.createUpgradePathSpecifierMutex.RUnlock()
	return len(fake.createUpgradePathSpecifierArgsForCall)
}

func (fake *UpgradePathSpecifiersCreatorClient) CreateUpgradePathSpecifierArgsForCall(i int) (string, int, string) {
	fake.createUpgradePathSpecifierMutex.RLock()
	defer fake.createUpgradePathSpecifierMutex.RUnlock()
	return fake.createUpgradePathSpecifierArgsForCall[i].productSlug, fake.createUpgradePathSpecifierArgsForCall[i].releaseID, fake.createUpgradePathSpecifierArgsForCall[i].specifier
}

func (fake *UpgradePathSpecifiersCreatorClient) CreateUpgradePathSpecifierReturns(result1 pivnet.UpgradePathSpecifier, result2 error) {
	fake.CreateUpgradePathSpecifierStub = nil
	fake.createUpgradePathSpecifierReturns = struct {
		result1 pivnet.UpgradePathSpecifier
		result2 error
	}{result1, result2}
}

func (fake *UpgradePathSpecifiersCreatorClient) CreateUpgradePathSpecifierReturnsOnCall(i int, result1 pivnet.UpgradePathSpecifier, result2 error) {
	fake.CreateUpgradePathSpecifierStub = nil
	if fake.createUpgradePathSpecifierReturnsOnCall == nil {
		fake.createUpgradePathSpecifierReturnsOnCall = make(map[int]struct {
			result1 pivnet.UpgradePathSpecifier
			result2 error
		})
	}
	fake.createUpgradePathSpecifierReturnsOnCall[i] = struct {
		result1 pivnet.UpgradePathSpecifier
		result2 error
	}{result1, result2}
}

func (fake *UpgradePathSpecifiersCreatorClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createUpgradePathSpecifierMutex.RLock()
	defer fake.createUpgradePathSpecifierMutex.RUnlock()
	return fake.invocations
}

func (fake *UpgradePathSpecifiersCreatorClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
