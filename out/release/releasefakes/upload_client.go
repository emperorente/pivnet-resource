// This file was generated by counterfeiter
package releasefakes

import (
	"sync"

	"github.com/pivotal-cf/go-pivnet"
)

type UploadClient struct {
	FindProductForSlugStub        func(slug string) (pivnet.Product, error)
	findProductForSlugMutex       sync.RWMutex
	findProductForSlugArgsForCall []struct {
		slug string
	}
	findProductForSlugReturns struct {
		result1 pivnet.Product
		result2 error
	}
	findProductForSlugReturnsOnCall map[int]struct {
		result1 pivnet.Product
		result2 error
	}
	CreateProductFileStub        func(pivnet.CreateProductFileConfig) (pivnet.ProductFile, error)
	createProductFileMutex       sync.RWMutex
	createProductFileArgsForCall []struct {
		arg1 pivnet.CreateProductFileConfig
	}
	createProductFileReturns struct {
		result1 pivnet.ProductFile
		result2 error
	}
	createProductFileReturnsOnCall map[int]struct {
		result1 pivnet.ProductFile
		result2 error
	}
	AddProductFileStub        func(productSlug string, releaseID int, productFileID int) error
	addProductFileMutex       sync.RWMutex
	addProductFileArgsForCall []struct {
		productSlug   string
		releaseID     int
		productFileID int
	}
	addProductFileReturns struct {
		result1 error
	}
	addProductFileReturnsOnCall map[int]struct {
		result1 error
	}
	AddFileGroupStub        func(name string, releaseID int, fileGroupID int) error
	addFileGroupMutex       sync.RWMutex
	addFileGroupArgsForCall []struct {
		name        string
		releaseID   int
		fileGroupID int
	}
	addFileGroupReturns struct {
		result1 error
	}
	addFileGroupReturnsOnCall map[int]struct {
		result1 error
	}
	CreateFileGroupStub        func(pivnet.CreateFileGroupConfig) (pivnet.FileGroup, error)
	createFileGroupMutex       sync.RWMutex
	createFileGroupArgsForCall []struct {
		arg1 pivnet.CreateFileGroupConfig
	}
	createFileGroupReturns struct {
		result1 pivnet.FileGroup
		result2 error
	}
	createFileGroupReturnsOnCall map[int]struct {
		result1 pivnet.FileGroup
		result2 error
	}
	ProductFilesStub        func(productSlug string) ([]pivnet.ProductFile, error)
	productFilesMutex       sync.RWMutex
	productFilesArgsForCall []struct {
		productSlug string
	}
	productFilesReturns struct {
		result1 []pivnet.ProductFile
		result2 error
	}
	productFilesReturnsOnCall map[int]struct {
		result1 []pivnet.ProductFile
		result2 error
	}
	ProductFileStub        func(productSlug string, productFileID int) (pivnet.ProductFile, error)
	productFileMutex       sync.RWMutex
	productFileArgsForCall []struct {
		productSlug   string
		productFileID int
	}
	productFileReturns struct {
		result1 pivnet.ProductFile
		result2 error
	}
	productFileReturnsOnCall map[int]struct {
		result1 pivnet.ProductFile
		result2 error
	}
	DeleteProductFileStub        func(productSlug string, releaseID int) (pivnet.ProductFile, error)
	deleteProductFileMutex       sync.RWMutex
	deleteProductFileArgsForCall []struct {
		productSlug string
		releaseID   int
	}
	deleteProductFileReturns struct {
		result1 pivnet.ProductFile
		result2 error
	}
	deleteProductFileReturnsOnCall map[int]struct {
		result1 pivnet.ProductFile
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UploadClient) FindProductForSlug(slug string) (pivnet.Product, error) {
	fake.findProductForSlugMutex.Lock()
	ret, specificReturn := fake.findProductForSlugReturnsOnCall[len(fake.findProductForSlugArgsForCall)]
	fake.findProductForSlugArgsForCall = append(fake.findProductForSlugArgsForCall, struct {
		slug string
	}{slug})
	fake.recordInvocation("FindProductForSlug", []interface{}{slug})
	fake.findProductForSlugMutex.Unlock()
	if fake.FindProductForSlugStub != nil {
		return fake.FindProductForSlugStub(slug)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findProductForSlugReturns.result1, fake.findProductForSlugReturns.result2
}

func (fake *UploadClient) FindProductForSlugCallCount() int {
	fake.findProductForSlugMutex.RLock()
	defer fake.findProductForSlugMutex.RUnlock()
	return len(fake.findProductForSlugArgsForCall)
}

func (fake *UploadClient) FindProductForSlugArgsForCall(i int) string {
	fake.findProductForSlugMutex.RLock()
	defer fake.findProductForSlugMutex.RUnlock()
	return fake.findProductForSlugArgsForCall[i].slug
}

func (fake *UploadClient) FindProductForSlugReturns(result1 pivnet.Product, result2 error) {
	fake.FindProductForSlugStub = nil
	fake.findProductForSlugReturns = struct {
		result1 pivnet.Product
		result2 error
	}{result1, result2}
}

func (fake *UploadClient) FindProductForSlugReturnsOnCall(i int, result1 pivnet.Product, result2 error) {
	fake.FindProductForSlugStub = nil
	if fake.findProductForSlugReturnsOnCall == nil {
		fake.findProductForSlugReturnsOnCall = make(map[int]struct {
			result1 pivnet.Product
			result2 error
		})
	}
	fake.findProductForSlugReturnsOnCall[i] = struct {
		result1 pivnet.Product
		result2 error
	}{result1, result2}
}

func (fake *UploadClient) CreateProductFile(arg1 pivnet.CreateProductFileConfig) (pivnet.ProductFile, error) {
	fake.createProductFileMutex.Lock()
	ret, specificReturn := fake.createProductFileReturnsOnCall[len(fake.createProductFileArgsForCall)]
	fake.createProductFileArgsForCall = append(fake.createProductFileArgsForCall, struct {
		arg1 pivnet.CreateProductFileConfig
	}{arg1})
	fake.recordInvocation("CreateProductFile", []interface{}{arg1})
	fake.createProductFileMutex.Unlock()
	if fake.CreateProductFileStub != nil {
		return fake.CreateProductFileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createProductFileReturns.result1, fake.createProductFileReturns.result2
}

func (fake *UploadClient) CreateProductFileCallCount() int {
	fake.createProductFileMutex.RLock()
	defer fake.createProductFileMutex.RUnlock()
	return len(fake.createProductFileArgsForCall)
}

func (fake *UploadClient) CreateProductFileArgsForCall(i int) pivnet.CreateProductFileConfig {
	fake.createProductFileMutex.RLock()
	defer fake.createProductFileMutex.RUnlock()
	return fake.createProductFileArgsForCall[i].arg1
}

func (fake *UploadClient) CreateProductFileReturns(result1 pivnet.ProductFile, result2 error) {
	fake.CreateProductFileStub = nil
	fake.createProductFileReturns = struct {
		result1 pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *UploadClient) CreateProductFileReturnsOnCall(i int, result1 pivnet.ProductFile, result2 error) {
	fake.CreateProductFileStub = nil
	if fake.createProductFileReturnsOnCall == nil {
		fake.createProductFileReturnsOnCall = make(map[int]struct {
			result1 pivnet.ProductFile
			result2 error
		})
	}
	fake.createProductFileReturnsOnCall[i] = struct {
		result1 pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *UploadClient) AddProductFile(productSlug string, releaseID int, productFileID int) error {
	fake.addProductFileMutex.Lock()
	ret, specificReturn := fake.addProductFileReturnsOnCall[len(fake.addProductFileArgsForCall)]
	fake.addProductFileArgsForCall = append(fake.addProductFileArgsForCall, struct {
		productSlug   string
		releaseID     int
		productFileID int
	}{productSlug, releaseID, productFileID})
	fake.recordInvocation("AddProductFile", []interface{}{productSlug, releaseID, productFileID})
	fake.addProductFileMutex.Unlock()
	if fake.AddProductFileStub != nil {
		return fake.AddProductFileStub(productSlug, releaseID, productFileID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addProductFileReturns.result1
}

func (fake *UploadClient) AddProductFileCallCount() int {
	fake.addProductFileMutex.RLock()
	defer fake.addProductFileMutex.RUnlock()
	return len(fake.addProductFileArgsForCall)
}

func (fake *UploadClient) AddProductFileArgsForCall(i int) (string, int, int) {
	fake.addProductFileMutex.RLock()
	defer fake.addProductFileMutex.RUnlock()
	return fake.addProductFileArgsForCall[i].productSlug, fake.addProductFileArgsForCall[i].releaseID, fake.addProductFileArgsForCall[i].productFileID
}

func (fake *UploadClient) AddProductFileReturns(result1 error) {
	fake.AddProductFileStub = nil
	fake.addProductFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *UploadClient) AddProductFileReturnsOnCall(i int, result1 error) {
	fake.AddProductFileStub = nil
	if fake.addProductFileReturnsOnCall == nil {
		fake.addProductFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addProductFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *UploadClient) AddFileGroup(name string, releaseID int, fileGroupID int) error {
	fake.addFileGroupMutex.Lock()
	ret, specificReturn := fake.addFileGroupReturnsOnCall[len(fake.addFileGroupArgsForCall)]
	fake.addFileGroupArgsForCall = append(fake.addFileGroupArgsForCall, struct {
		name        string
		releaseID   int
		fileGroupID int
	}{name, releaseID, fileGroupID})
	fake.recordInvocation("AddFileGroup", []interface{}{name, releaseID, fileGroupID})
	fake.addFileGroupMutex.Unlock()
	if fake.AddFileGroupStub != nil {
		return fake.AddFileGroupStub(name, releaseID, fileGroupID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addFileGroupReturns.result1
}

func (fake *UploadClient) AddFileGroupCallCount() int {
	fake.addFileGroupMutex.RLock()
	defer fake.addFileGroupMutex.RUnlock()
	return len(fake.addFileGroupArgsForCall)
}

func (fake *UploadClient) AddFileGroupArgsForCall(i int) (string, int, int) {
	fake.addFileGroupMutex.RLock()
	defer fake.addFileGroupMutex.RUnlock()
	return fake.addFileGroupArgsForCall[i].name, fake.addFileGroupArgsForCall[i].releaseID, fake.addFileGroupArgsForCall[i].fileGroupID
}

func (fake *UploadClient) AddFileGroupReturns(result1 error) {
	fake.AddFileGroupStub = nil
	fake.addFileGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *UploadClient) AddFileGroupReturnsOnCall(i int, result1 error) {
	fake.AddFileGroupStub = nil
	if fake.addFileGroupReturnsOnCall == nil {
		fake.addFileGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addFileGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *UploadClient) CreateFileGroup(arg1 pivnet.CreateFileGroupConfig) (pivnet.FileGroup, error) {
	fake.createFileGroupMutex.Lock()
	ret, specificReturn := fake.createFileGroupReturnsOnCall[len(fake.createFileGroupArgsForCall)]
	fake.createFileGroupArgsForCall = append(fake.createFileGroupArgsForCall, struct {
		arg1 pivnet.CreateFileGroupConfig
	}{arg1})
	fake.recordInvocation("CreateFileGroup", []interface{}{arg1})
	fake.createFileGroupMutex.Unlock()
	if fake.CreateFileGroupStub != nil {
		return fake.CreateFileGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createFileGroupReturns.result1, fake.createFileGroupReturns.result2
}

func (fake *UploadClient) CreateFileGroupCallCount() int {
	fake.createFileGroupMutex.RLock()
	defer fake.createFileGroupMutex.RUnlock()
	return len(fake.createFileGroupArgsForCall)
}

func (fake *UploadClient) CreateFileGroupArgsForCall(i int) pivnet.CreateFileGroupConfig {
	fake.createFileGroupMutex.RLock()
	defer fake.createFileGroupMutex.RUnlock()
	return fake.createFileGroupArgsForCall[i].arg1
}

func (fake *UploadClient) CreateFileGroupReturns(result1 pivnet.FileGroup, result2 error) {
	fake.CreateFileGroupStub = nil
	fake.createFileGroupReturns = struct {
		result1 pivnet.FileGroup
		result2 error
	}{result1, result2}
}

func (fake *UploadClient) CreateFileGroupReturnsOnCall(i int, result1 pivnet.FileGroup, result2 error) {
	fake.CreateFileGroupStub = nil
	if fake.createFileGroupReturnsOnCall == nil {
		fake.createFileGroupReturnsOnCall = make(map[int]struct {
			result1 pivnet.FileGroup
			result2 error
		})
	}
	fake.createFileGroupReturnsOnCall[i] = struct {
		result1 pivnet.FileGroup
		result2 error
	}{result1, result2}
}

func (fake *UploadClient) ProductFiles(productSlug string) ([]pivnet.ProductFile, error) {
	fake.productFilesMutex.Lock()
	ret, specificReturn := fake.productFilesReturnsOnCall[len(fake.productFilesArgsForCall)]
	fake.productFilesArgsForCall = append(fake.productFilesArgsForCall, struct {
		productSlug string
	}{productSlug})
	fake.recordInvocation("ProductFiles", []interface{}{productSlug})
	fake.productFilesMutex.Unlock()
	if fake.ProductFilesStub != nil {
		return fake.ProductFilesStub(productSlug)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.productFilesReturns.result1, fake.productFilesReturns.result2
}

func (fake *UploadClient) ProductFilesCallCount() int {
	fake.productFilesMutex.RLock()
	defer fake.productFilesMutex.RUnlock()
	return len(fake.productFilesArgsForCall)
}

func (fake *UploadClient) ProductFilesArgsForCall(i int) string {
	fake.productFilesMutex.RLock()
	defer fake.productFilesMutex.RUnlock()
	return fake.productFilesArgsForCall[i].productSlug
}

func (fake *UploadClient) ProductFilesReturns(result1 []pivnet.ProductFile, result2 error) {
	fake.ProductFilesStub = nil
	fake.productFilesReturns = struct {
		result1 []pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *UploadClient) ProductFilesReturnsOnCall(i int, result1 []pivnet.ProductFile, result2 error) {
	fake.ProductFilesStub = nil
	if fake.productFilesReturnsOnCall == nil {
		fake.productFilesReturnsOnCall = make(map[int]struct {
			result1 []pivnet.ProductFile
			result2 error
		})
	}
	fake.productFilesReturnsOnCall[i] = struct {
		result1 []pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *UploadClient) ProductFile(productSlug string, productFileID int) (pivnet.ProductFile, error) {
	fake.productFileMutex.Lock()
	ret, specificReturn := fake.productFileReturnsOnCall[len(fake.productFileArgsForCall)]
	fake.productFileArgsForCall = append(fake.productFileArgsForCall, struct {
		productSlug   string
		productFileID int
	}{productSlug, productFileID})
	fake.recordInvocation("ProductFile", []interface{}{productSlug, productFileID})
	fake.productFileMutex.Unlock()
	if fake.ProductFileStub != nil {
		return fake.ProductFileStub(productSlug, productFileID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.productFileReturns.result1, fake.productFileReturns.result2
}

func (fake *UploadClient) ProductFileCallCount() int {
	fake.productFileMutex.RLock()
	defer fake.productFileMutex.RUnlock()
	return len(fake.productFileArgsForCall)
}

func (fake *UploadClient) ProductFileArgsForCall(i int) (string, int) {
	fake.productFileMutex.RLock()
	defer fake.productFileMutex.RUnlock()
	return fake.productFileArgsForCall[i].productSlug, fake.productFileArgsForCall[i].productFileID
}

func (fake *UploadClient) ProductFileReturns(result1 pivnet.ProductFile, result2 error) {
	fake.ProductFileStub = nil
	fake.productFileReturns = struct {
		result1 pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *UploadClient) ProductFileReturnsOnCall(i int, result1 pivnet.ProductFile, result2 error) {
	fake.ProductFileStub = nil
	if fake.productFileReturnsOnCall == nil {
		fake.productFileReturnsOnCall = make(map[int]struct {
			result1 pivnet.ProductFile
			result2 error
		})
	}
	fake.productFileReturnsOnCall[i] = struct {
		result1 pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *UploadClient) DeleteProductFile(productSlug string, releaseID int) (pivnet.ProductFile, error) {
	fake.deleteProductFileMutex.Lock()
	ret, specificReturn := fake.deleteProductFileReturnsOnCall[len(fake.deleteProductFileArgsForCall)]
	fake.deleteProductFileArgsForCall = append(fake.deleteProductFileArgsForCall, struct {
		productSlug string
		releaseID   int
	}{productSlug, releaseID})
	fake.recordInvocation("DeleteProductFile", []interface{}{productSlug, releaseID})
	fake.deleteProductFileMutex.Unlock()
	if fake.DeleteProductFileStub != nil {
		return fake.DeleteProductFileStub(productSlug, releaseID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteProductFileReturns.result1, fake.deleteProductFileReturns.result2
}

func (fake *UploadClient) DeleteProductFileCallCount() int {
	fake.deleteProductFileMutex.RLock()
	defer fake.deleteProductFileMutex.RUnlock()
	return len(fake.deleteProductFileArgsForCall)
}

func (fake *UploadClient) DeleteProductFileArgsForCall(i int) (string, int) {
	fake.deleteProductFileMutex.RLock()
	defer fake.deleteProductFileMutex.RUnlock()
	return fake.deleteProductFileArgsForCall[i].productSlug, fake.deleteProductFileArgsForCall[i].releaseID
}

func (fake *UploadClient) DeleteProductFileReturns(result1 pivnet.ProductFile, result2 error) {
	fake.DeleteProductFileStub = nil
	fake.deleteProductFileReturns = struct {
		result1 pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *UploadClient) DeleteProductFileReturnsOnCall(i int, result1 pivnet.ProductFile, result2 error) {
	fake.DeleteProductFileStub = nil
	if fake.deleteProductFileReturnsOnCall == nil {
		fake.deleteProductFileReturnsOnCall = make(map[int]struct {
			result1 pivnet.ProductFile
			result2 error
		})
	}
	fake.deleteProductFileReturnsOnCall[i] = struct {
		result1 pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *UploadClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findProductForSlugMutex.RLock()
	defer fake.findProductForSlugMutex.RUnlock()
	fake.createProductFileMutex.RLock()
	defer fake.createProductFileMutex.RUnlock()
	fake.addProductFileMutex.RLock()
	defer fake.addProductFileMutex.RUnlock()
	fake.addFileGroupMutex.RLock()
	defer fake.addFileGroupMutex.RUnlock()
	fake.createFileGroupMutex.RLock()
	defer fake.createFileGroupMutex.RUnlock()
	fake.productFilesMutex.RLock()
	defer fake.productFilesMutex.RUnlock()
	fake.productFileMutex.RLock()
	defer fake.productFileMutex.RUnlock()
	fake.deleteProductFileMutex.RLock()
	defer fake.deleteProductFileMutex.RUnlock()
	return fake.invocations
}

func (fake *UploadClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
