// This file was generated by counterfeiter
package outfakes

import (
	"sync"

	"github.com/pivotal-cf/go-pivnet"
)

type UpgradePathSpecifiersCreator struct {
	CreateUpgradePathSpecifiersStub        func(release pivnet.Release) error
	createUpgradePathSpecifiersMutex       sync.RWMutex
	createUpgradePathSpecifiersArgsForCall []struct {
		release pivnet.Release
	}
	createUpgradePathSpecifiersReturns struct {
		result1 error
	}
	createUpgradePathSpecifiersReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UpgradePathSpecifiersCreator) CreateUpgradePathSpecifiers(release pivnet.Release) error {
	fake.createUpgradePathSpecifiersMutex.Lock()
	ret, specificReturn := fake.createUpgradePathSpecifiersReturnsOnCall[len(fake.createUpgradePathSpecifiersArgsForCall)]
	fake.createUpgradePathSpecifiersArgsForCall = append(fake.createUpgradePathSpecifiersArgsForCall, struct {
		release pivnet.Release
	}{release})
	fake.recordInvocation("CreateUpgradePathSpecifiers", []interface{}{release})
	fake.createUpgradePathSpecifiersMutex.Unlock()
	if fake.CreateUpgradePathSpecifiersStub != nil {
		return fake.CreateUpgradePathSpecifiersStub(release)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createUpgradePathSpecifiersReturns.result1
}

func (fake *UpgradePathSpecifiersCreator) CreateUpgradePathSpecifiersCallCount() int {
	fake.createUpgradePathSpecifiersMutex.RLock()
	defer fake.createUpgradePathSpecifiersMutex.RUnlock()
	return len(fake.createUpgradePathSpecifiersArgsForCall)
}

func (fake *UpgradePathSpecifiersCreator) CreateUpgradePathSpecifiersArgsForCall(i int) pivnet.Release {
	fake.createUpgradePathSpecifiersMutex.RLock()
	defer fake.createUpgradePathSpecifiersMutex.RUnlock()
	return fake.createUpgradePathSpecifiersArgsForCall[i].release
}

func (fake *UpgradePathSpecifiersCreator) CreateUpgradePathSpecifiersReturns(result1 error) {
	fake.CreateUpgradePathSpecifiersStub = nil
	fake.createUpgradePathSpecifiersReturns = struct {
		result1 error
	}{result1}
}

func (fake *UpgradePathSpecifiersCreator) CreateUpgradePathSpecifiersReturnsOnCall(i int, result1 error) {
	fake.CreateUpgradePathSpecifiersStub = nil
	if fake.createUpgradePathSpecifiersReturnsOnCall == nil {
		fake.createUpgradePathSpecifiersReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createUpgradePathSpecifiersReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *UpgradePathSpecifiersCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createUpgradePathSpecifiersMutex.RLock()
	defer fake.createUpgradePathSpecifiersMutex.RUnlock()
	return fake.invocations
}

func (fake *UpgradePathSpecifiersCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
